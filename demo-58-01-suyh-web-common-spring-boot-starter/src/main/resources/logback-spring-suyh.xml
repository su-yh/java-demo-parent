<?xml version="1.0" encoding="UTF-8"?>

<!-- 注意这个文件名，似乎只能是这个，否则springProperty 会有问题配置这个文件名系统会自动加载这个配置 -->
<configuration>
    <!-- 引用 Spring Boot 的 logback 基础配置 -->
<!--    <include resource="org/springframework/boot/logging/logback/defaults.xml" />-->
    <!-- 如果这个文件的文件名不是logback-spring.xml 的话这个属性应该是不被支持的 -->
    <!-- 从springboot 的application.yaml 配置文件中获取配置值 -->
    <!-- springProperty 标签，这里替代logback 的默认 property 标签 -->
    <!-- name属性：指定变量名，在当前配置文件中生效 -->
    <!-- source属性：在application.yaml 配置文件中定义的key。这里将会取这个key 对应的值来填充变量的值 -->
    <!-- defaultValue属性：如果在没有找到 source 指定的key 则使用该值 -->
    <!--<springProperty scope="context" name="LOG_HOME" source="logback.file.dir" defaultValue="/home/logs-default" />-->
    <!-- 格式化输出：%d 表示日期，%X{tid} SkWalking 链路追踪编号，%thread 表示线程名，%-5level：级别从左显示 5 个字符宽度，%msg：日志消息，%n是换行符 -->
    <!-- %-20.20logger:%4L 左对齐最少20 个字符(不够补空格)，最大20 个字符。再显示行号时右对齐，最少4 个字符(不够补空格) -->
    <property name="PATTERN_STDOUT" value="%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} | %highlight(${LOG_LEVEL_PATTERN:-%5p} ${PID:- }) | %boldYellow(%-20.20thread) %boldGreen(%-40.40logger:%4L) | %m%n"/>
    <property name="PATTERN_FILE" value="%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} | ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } | %thread %-40.40logger:%4L | %m%n"/>


    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出 -->
            <pattern>${PATTERN_STDOUT}</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <!-- 参考 Spring Boot 的 file-appender.xml 编写 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件名:${logging.file.name} -->
        <file>${LOG_FILE:-logs/default-log-name.log}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动后的日志文件名 -->
            <!--如果变量对应的值不存在则取默认值，格式为：':-' -->
            <!--变量(LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN) ==> 对应配置文件 中的配置项： logging.logback.rollingpolicy.file-name-pattern-->
            <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-logs/%d{yyyy-MM-dd}/default-name.%03i.log}</fileNamePattern>
            <!-- 启动服务时，是否清理历史日志，一般不建议清理 -->
            <!--LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START  对应配置文件中的： logging.logback.rollingpolicy.clean-history-on-start -->
            <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-true}</cleanHistoryOnStart>
            <!-- 日志文件，到达多少容量，进行滚动 -->
            <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}</maxFileSize>
            <!-- 日志文件的总大小，0 表示不限制 -->
            <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}</totalSizeCap>
            <!-- 日志文件的保留天数 -->
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-30}</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN_FILE}</pattern>
        </encoder>
    </appender>

    <!--默认情况下，只输出到标准输出，不输出到文件-->
    <root level="DEBUG">
        <!-- 标准输出日志 -->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

    <!-- 该 <springProfile> 标签允许我们更加灵活配置文件，可选地包含或排除配置部分。
        元素中的任何位置均支持轮廓部分。使用该name属性指定哪个配置文件接受配置。
        可以使用逗号分隔列表指定多个配置文件。
        也可以在前面添加"!" 来排除哪些某些环境
    -->
    <!-- 开发环境时激活 -->
    <springProfile name="dev">
        <!-- 开发环境日志级别为DEBUG -->
        <root level="DEBUG">
            <!-- 文件输出日志 -->
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>

    <!-- 开发，测试的时候激活-->
    <springProfile name="dev,test">
    </springProfile>

    <!-- 当 "生产" 环境时，该配置不激活-->
    <springProfile name="!prod">
    </springProfile>

    <!-- 测试环境日志级别为INFO -->
    <springProfile name="test">
        <root level="INFO">
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>
</configuration>