#\u670D\u52A1\u540D\u79F0
spring.application.name=oms
#\u5F53\u524D\u6FC0\u6D3B\u914D\u7F6E\u6587\u4EF6
spring.profiles.active=local
#jackson
spring.jackson.default-property-inclusion=NON_EMPTY
spring.jackson.time-zone=GMT+8
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#\u670D\u52A1\u6CE8\u518C\u7AEF\u53E3
server.port=9607
server.connection-timeout=3000

# server.servlet.context-path=/oms

# spring.main.allow-bean-definition-overriding=true
# eureka.client.service-url.defaultZone=http://${register-center-ip-port}/eureka/
# eureka.instance.ip-address=${eureka-prefer-bind-ip}
# eureka.instance.prefer-ip-address=true
# eureka.instance.instance-id=${eureka.instance.ip-address}:${spring.application.name}:${server.port}

#spring\u96C6\u6210\u7684\u6570\u636E\u6E90\u9A71\u52A8
#druid
# spring.datasource.druid.driver-class-name=oracle.jdbc.OracleDriver
# spring.datasource.druid.url=jdbc:oracle:thin:@${db-url}
# spring.datasource.druid.username=${db-username}
# spring.datasource.druid.password=${db-pwd}
# spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# spring.datasource.druid.initialSize=5
# spring.datasource.druid.minIdle=5
# spring.datasource.druid.maxActive=20
# spring.datasource.druid.maxWait=60000
# spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
# spring.datasource.druid.minEvictableIdleTimeMillis=300000
# spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
# spring.datasource.druid.testWhileIdle=true
# spring.datasource.druid.testOnBorrow=false
# spring.datasource.druid.testOnReturn=false
# spring.datasource.druid.poolPreparedStatements=true
# spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
# spring.datasource.druid.filters=stat,wall,log4j2
# spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# mybatis.mapper-locations=classpath:mapper/*.xml
# mybatis.type-aliases-package=com.isoftstone.hig.oms.api.entity,com.isoftstone.hig.oms.api.filter
# mybatis.configuration.map-underscore-to-camel-case=true

#JWT\u76F8\u5173\u914D\u7F6E
# header:\u51ED\u8BC1(\u6821\u9A8C\u7684\u53D8\u91CF\u540D), expire:\u6709\u6548\u671F1\u5929(\u5355\u4F4D:s), secret:\u79D8\u94A5(\u666E\u901A\u5B57\u7B26\u4E32)
jwt.header=Authorization
jwt.secret=aaHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzM2ODE4Njg
# token  \u6709\u6548\u671F\u65F6\u95F4\uFF08\u5355\u4F4D\u79D2)
jwt.expiration=10080
# \u9A8C\u8BC1\u4E0D\u901A\u8FC7\u8DF3\u8F6C\u8DEF\u5F84
jwt.auth.path=/login
# \u9A8C\u8BC1\u8D26\u53F7\u4FE1\u606F\u8DEF\u5F84
jwt.auth.account=/info

# redis\u5355\u673A\u914D\u7F6E
# redis \u7ED1\u5B9A\u7684\u4E3B\u673A\u5730\u5740\uFF0C\u4E0D\u8BBE\u7F6E\u9ED8\u8BA4\u5C06\u5904\u7406\u6240\u6709\u8BF7\u6C42
redis.host=${redis-ip}
#\u6307\u5B9Aredis\u76D1\u542C\u7AEF\u53E3
redis.port=${redis-port}
# \u5F53\u5BA2\u6237\u7AEF\u95F2\u7F6E\u591A\u957F\u65F6\u95F4\u540E\u5173\u95ED\u8FDE\u63A5\uFF0C\u5982\u679C\u6307\u5B9A\u4E3A0\uFF0C\u8868\u793A\u5173\u95ED\u8BE5\u529F\u80FD
redis.timeout=3000
# \u5BC6\u7801\u8BBE\u7F6E
redis.password=${redis-pwd}
# \u5982\u679C\u8D4B\u503C\u4E3A-1\uFF0C\u5219\u8868\u793A\u4E0D\u9650\u5236\uFF1B\u5982\u679Cpool\u5DF2\u7ECF\u5206\u914D\u4E86maxActive\u4E2Ajedis\u5B9E\u4F8B\uFF0C\u5219\u6B64\u65F6pool\u7684\u72B6\u6001\u4E3Aexhausted(\u8017\u5C3D)\u3002
redis.pool.maxActive=200
# \u8FDE\u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5927\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u9ED8\u8BA4\u503C\u4E5F\u662F8\u3002
redis.pool.maxIdle=20
# \u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u9ED8\u8BA4\u503C\u4E5F\u662F0\u3002
redis.pool.minIdle=5
#\u7B49\u5F85\u53EF\u7528\u8FDE\u63A5\u7684\u6700\u5927\u65F6\u95F4\uFF0C\u5355\u4F4D\u6BEB\u79D2\uFF0C\u9ED8\u8BA4\u503C\u4E3A-1\uFF0C\u8868\u793A\u6C38\u4E0D\u8D85\u65F6\u3002\u5982\u679C\u8D85\u8FC7\u7B49\u5F85\u65F6\u95F4\uFF0C\u5219\u76F4\u63A5\u629B\u51FAJedisConnectionException
redis.pool.maxWait=3000
redis.pool.testOnBorrow=true
redis.pool.testOnReturn=true

# kafka \u76F8\u5173\u914D\u7F6E\u9879================================\u3010START\u3011\u9753\u4E3D\u5206\u9694\u7EBF=========================
# kafka\u670D\u52A1\u5668\u5730\u5740,\u96C6\u7FA4\u4EE5\u9017\u53F7\u5206\u9694 \u4EE5\u9017\u53F7\u5206\u9694\u7684\u4E3B\u673A\uFF1A\u7AEF\u53E3\u5BF9\u5217\u8868\uFF0C\u7528\u4E8E\u5EFA\u7ACB\u4E0EKafka\u7FA4\u96C6\u7684\u521D\u59CB\u8FDE\u63A5\u3002
spring.kafka.bootstrap-servers=${mq-servers}
# kafka \u3010\u6D88\u8D39\u8005\u3011\u76F8\u5173\u914D\u7F6E  \u7528\u4E8E\u6807\u8BC6\u6B64\u4F7F\u7528\u8005\u6240\u5C5E\u7684\u4F7F\u7528\u8005\u7EC4\u7684\u552F\u4E00\u5B57\u7B26\u4E32\u3002 \u8BBE\u7F6E\u4E00\u4E2A\u9ED8\u8BA4\u7EC4
spring.kafka.consumer.group-id=${spring.profiles.active}_${spring.application.name}
#\u5982\u679C\u4E3Atrue\uFF0C\u5219\u6D88\u8D39\u8005\u7684\u504F\u79FB\u91CF\u5C06\u5728\u540E\u53F0\u5B9A\u671F\u63D0\u4EA4\uFF0C\u9ED8\u8BA4\u503C\u4E3Atrue
spring.kafka.consumer.enable-auto-commit=true
#earliest--#\u5F53\u5404\u5206\u533A\u4E0B\u6709\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u63D0\u4EA4\u7684offset\u5F00\u59CB\u6D88\u8D39\uFF1B\u65E0\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u5934\u5F00\u59CB\u6D88\u8D39
#latest ---\u5F53\u5404\u5206\u533A\u4E0B\u6709\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u63D0\u4EA4\u7684offset\u5F00\u59CB\u6D88\u8D39\uFF1B\u65E0\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u6D88\u8D39\u65B0\u4EA7\u751F\u7684\u8BE5\u5206\u533A\u4E0B\u7684\u6570\u636E
#none --topic\u5404\u5206\u533A\u90FD\u5B58\u5728\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECEoffset\u540E\u5F00\u59CB\u6D88\u8D39\uFF1B\u53EA\u8981\u6709\u4E00\u4E2A\u5206\u533A\u4E0D\u5B58\u5728\u5DF2\u63D0\u4EA4\u7684offset\uFF0C\u5219\u629B\u51FA\u5F02\u5E38
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=2000
#key-value\u5E8F\u5217\u5316\u53CD\u5E8F\u5217\u5316
# key \u4F7F\u7528\u7684\u662FString \uFF0C\u6240\u4EE5\u8FD9\u91CC\u4F7F\u7528\u5B57\u7B26\u4E32\u7684\u53CD\u5E8F\u5217\u5316
# spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# value \u4F7F\u7528\u7684\u662FMqEvent\uFF0C\u6240\u4EE5\u8FD9\u91CC\u9700\u8981\u4F7F\u7528 MqEventDeserializer
# spring.kafka.consumer.value-deserializer=com.suyh.entity.MqEventDeserializer
# kafka \u3010\u751F\u4EA7\u8005\u3011\u76F8\u5173\u914D\u7F6E \u8BBE\u7F6E\u4E00\u4E2A\u9ED8\u8BA4\u7EC4
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.linger=10
# key \u4F7F\u7528\u7684\u662FString \uFF0C\u6240\u4EE5\u8FD9\u91CC\u4F7F\u7528\u5B57\u7B26\u4E32\u7684\u53CD\u5E8F\u5217\u5316
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringDeserializer
# value \u4F7F\u7528\u7684\u662FMqEvent\uFF0C\u6240\u4EE5\u8FD9\u91CC\u9700\u8981\u4F7F\u7528 MqEventDeserializer
# spring.kafka.producer.value-serializer=com.suyh.entity.MqEventDeserializer


# sql
logging.level.com.isoftstone.hig.oms.repository=trace