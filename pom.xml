<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
    </parent>

    <groupId>com.suyh</groupId>
    <artifactId>java-demo-springboot</artifactId>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>demo-00-core-01</module>
        <module>demo-01-test-01</module>
        <module>demo-01-test-02-mock</module>
        <module>demo-02-properties-01</module>
        <module>demo-03-jedis-01</module>
        <module>demo-04-scheduler-01</module>
        <module>demo-05-spring-context-util-01</module>
        <module>demo-06-mybatis-01</module>
        <module>demo-06-mybatis-02-common</module>
        <module>demo-07-kafka-01</module>
        <module>demo-08-jwt-01</module>
        <module>demo-09-shiro-01</module>
        <module>demo-09-shiro-02</module>
        <module>demo-09-shiro-03</module>
        <module>demo-09-shiro-04-ssm</module>
        <module>demo-11-init-01</module>
        <module>demo-12-swagger-01</module>
        <module>demo-13-autowired-resource-01</module>
        <module>demo-15-pagehelper-01</module>
        <module>demo-16-guava-01</module>
        <module>demo-17-jackson-01</module>
        <module>demo-18-resttemplate-01</module>
        <module>demo-19-servletRequest-01</module>
        <module>demo-20-filter-interceptor-01</module>
        <module>demo-21-controller-advice-01</module>
        <module>demo-22-validation-01</module>
        <module>demo-23-aop-01</module>
    </modules>

    <packaging>pom</packaging>

    <properties>
        <spring-boot-version>2.2.2.RELEASE</spring-boot-version>
        <version.java>1.8</version.java>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- MySQL Connector -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.16</version>
            </dependency>

            <dependency>
                <groupId>com.oracle.ojdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>19.3.0.0</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.36</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>2.10.2</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.10.2</version>
                <scope>compile</scope>
            </dependency>

            <!--缺少此jar包，导致@Mapper注解无效-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.0.1</version>
            </dependency>

            <!-- swagger -->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>2.9.2</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>2.9.2</version>
            </dependency>

            <!--mapper-->
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper-spring-boot-starter</artifactId>
                <version>2.1.5</version>
            </dependency>
            <!--pagehelper-->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>1.2.5</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.mybatis.spring.boot</groupId>
                        <artifactId>mybatis-spring-boot-starter</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.1.9</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>1.3.7</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>

            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>20.0</version>
            </dependency>

            <!--引入Kafka 开始-->
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka_2.12</artifactId>
                <version>1.1.1</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka</artifactId>
                <version>2.4.6.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-clients</artifactId>
                <version>2.0.1</version>
            </dependency>
            <!--引入Kafka 结束-->

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>0.9.0</version>
            </dependency>

            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring</artifactId>
                <version>1.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring-boot-web-starter</artifactId>
                <version>1.4.0</version>
            </dependency>

            <!-- shedlock 分布式定时任务锁 - 使用 jdbc -->
            <dependency>
                <groupId>net.javacrumbs.shedlock</groupId>
                <artifactId>shedlock-spring</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>net.javacrumbs.shedlock</groupId>
                <artifactId>shedlock-provider-jdbc-template</artifactId>
                <version>2.3.0</version>
            </dependency>

            <!-- shedlock - 使用 redis -->
            <dependency>
                <groupId>net.javacrumbs.shedlock</groupId>
                <artifactId>shedlock-provider-jedis</artifactId>
                <version>0.17.0</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!-- 按不同环境设置相关的配置 -->
    <!-- 可以在mvn 的时候使用 -P dev(${id}}) 来指定要激活哪一个配置并进行打包 -->
    <!-- 示例： mvn clean package -P dev -->
    <profiles>
        <profile>
            <id>local</id>
            <properties>
                <!-- 在这里可以添加一些该配置的一些变量使得可以在后面使用，当各个配置不同的得到不同的结果 -->
                <spring_profiles_active>local</spring_profiles_active>
            </properties>
            <activation>
                <!-- 默认激活该配置，按理来说我们只应该有一个环境的配置的该值为true -->
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <!-- 可以在这里指定打包后生成的文件名 -->
                <!-- demo-01-test-01-1.0-SNAPSHOT -->
                <finalName>${project.artifactId}-${project.version}</finalName>
            </build>
        </profile>

        <!-- dev环境的配置 -->
        <profile>
            <id>dev</id>
            <properties>
                <spring_profiles_active>dev</spring_profiles_active>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
    </profiles>

    <build>
        <!-- 我们也可以在这里来指定目标文件名，这里可以取到各个不同配置下面定义的变量值 -->
<!--        <finalName>${spring_profiles_active}-${project.version}-last</finalName>-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <!-- version.java = 1.8 -->
                    <source>${version.java}</source>
                    <target>${version.java}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.2.6.RELEASE</version>
                <configuration>
                    <mainClass>com.suyh.MainApplication</mainClass>
                </configuration>
            </plugin>
        </plugins>
        <!-- 指定跑测试用例时需要的资源文件所在路径，如果不加那么将获取不到相关的资源配置 -->
        <testResources>
            <testResource>
                <directory>src/main/resources</directory>
            </testResource>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
    </build>
</project>