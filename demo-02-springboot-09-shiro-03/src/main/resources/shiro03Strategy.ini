# 认证策略：在多个Realm 时才会用到认证策略
# 在shiro 中有3 种认证策略:
#       1. AtLeastOneSuccessfulStrategy(默认策略)
#           只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，
#           返回所有Realm身份验证成功的认证信息；
#       2. FirstSuccessfulStrategy
#           只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
#       3. AllSuccessfulStrategy
#           所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。
# 认证策略在 ModularRealmAuthenticator 认证器中

# 这个认证策略，我没有测试过。

# main section 是你配置应用程序 的SecurityManager 实例及任何它的依赖组件(如Realms) 的地方。
[main]

# 数据库配置
dataSource=com.mchange.v2.c3p0.ComboPooledDataSource
dataSource.driverClass=com.mysql.jdbc.Driver
dataSource.jdbcUrl=jdbc:mysql://localhost:3306/shiro
dataSource.user=root
dataSource.password=root
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource

# 配置验证器
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
authenticationStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy
authenticator.authenticationStrategy=$authenticationStrategy




securityManager.realm=$jdbcRealm

securityManager.authenticator.authenticationStrategy=$authenticationStrategy



# ---------------------------------------------------------------------
# users section 允许你定义一组静态的用户帐户。
[users]
# 用户名和密码
zhangsan=1111
# 用户名密码以及角色
lisi=2222,role1,role2


# ---------------------------------------------------------------------
# 将角色与权限关联起来
[roles]
role1=user:add, user:delete


